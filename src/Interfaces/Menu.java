/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interfaces;

import Estructuras.Grafo;
import Estructuras.List;
import Estructuras.User;
import Clases.Global;
import Clases.txt;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.graphstream.graph.*;
import org.graphstream.graph.implementations.*;
import org.graphstream.ui.view.Viewer;
/**
 * Esta clase contiene el menú de la interfaz gráfica y maneja todas las funcionalidades de este
 * @author alejandra, isabela y adrian
 */
public class Menu extends javax.swing.JFrame {
    public String n;
    public String texto;
    /**
     * Creates new form Menu
     */
    public Menu() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        archivos = new javax.swing.JMenu();
        cargarArchivo = new javax.swing.JMenuItem();
        archivoDefault = new javax.swing.JMenuItem();
        actualizarArchivo = new javax.swing.JMenuItem();
        mostrarRelaciones = new javax.swing.JMenu();
        MostrarRelaciones = new javax.swing.JMenuItem();
        mostrarIslas = new javax.swing.JMenu();
        BFS = new javax.swing.JMenuItem();
        DFS = new javax.swing.JMenuItem();
        puentes = new javax.swing.JMenu();
        editarRelaciones = new javax.swing.JMenu();
        añadirUsuario = new javax.swing.JMenuItem();
        eliminarUsuario = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 60, -1, -1));

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setBackground(new java.awt.Color(0, 0, 0));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagen/Proyecto EDD (2).png"))); // NOI18N
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(-80, -10, 570, 340));

        jLabel1.setFont(new java.awt.Font("Roboto Black", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("BeConnected.");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 340, -1, -1));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 530, 390));

        archivos.setText("Archivos");
        archivos.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        cargarArchivo.setText("Cargar archivo");
        cargarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarArchivoActionPerformed(evt);
            }
        });
        archivos.add(cargarArchivo);

        archivoDefault.setText("Archivo Default");
        archivoDefault.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                archivoDefaultActionPerformed(evt);
            }
        });
        archivos.add(archivoDefault);

        actualizarArchivo.setText("Actualizar archivo");
        actualizarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizarArchivoActionPerformed(evt);
            }
        });
        archivos.add(actualizarArchivo);

        jMenuBar1.add(archivos);

        mostrarRelaciones.setText("Mostrar Relaciones");
        mostrarRelaciones.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        MostrarRelaciones.setText("Mostrar Relaciones");
        MostrarRelaciones.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        MostrarRelaciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MostrarRelacionesActionPerformed(evt);
            }
        });
        mostrarRelaciones.add(MostrarRelaciones);

        jMenuBar1.add(mostrarRelaciones);

        mostrarIslas.setText("Mostrar Islas");
        mostrarIslas.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        BFS.setText("Recorrido por anchura");
        BFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BFSActionPerformed(evt);
            }
        });
        mostrarIslas.add(BFS);

        DFS.setText("Recorrido por profundidad");
        DFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DFSActionPerformed(evt);
            }
        });
        mostrarIslas.add(DFS);

        jMenuBar1.add(mostrarIslas);

        puentes.setText("Puentes");
        puentes.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        puentes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                puentesMouseClicked(evt);
            }
        });
        puentes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                puentesActionPerformed(evt);
            }
        });
        jMenuBar1.add(puentes);

        editarRelaciones.setText("Editar Relaciones");
        editarRelaciones.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        añadirUsuario.setText("Añadir usuario");
        añadirUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                añadirUsuarioActionPerformed(evt);
            }
        });
        editarRelaciones.add(añadirUsuario);

        eliminarUsuario.setText("Eliminar usuario");
        editarRelaciones.add(eliminarUsuario);

        jMenuBar1.add(editarRelaciones);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Este método lee el archivo txt del proyecto, para poder crear el grafo
     */
    private void cargarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarArchivoActionPerformed
        Grafo grafo = openFile();
        if (grafo != null){
            grafo.readRelation();
            Global.setGrafo(grafo);
            
        }
    }//GEN-LAST:event_cargarArchivoActionPerformed
    /**
     * Este método llama a la función que leerá la información del txt
     */
    private void archivoDefaultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_archivoDefaultActionPerformed
        Grafo grafo = txt.readTxt();
        grafo.readRelation();
        Global.setGrafo(grafo);
    }//GEN-LAST:event_archivoDefaultActionPerformed
    /**
     * Este método llama a la función que reescribira la información del txt, actualizandola
     */
    private void actualizarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualizarArchivoActionPerformed
        if (Global.getGrafo()!= null){
            txt.writeTxt(Global.getGrafo());
        } else {
            JOptionPane.showMessageDialog(null,"El grafo no tiene información!");  
        }
    }//GEN-LAST:event_actualizarArchivoActionPerformed
    /**
     * Este método muestra graficamente las islas del grafo, con sus nodos, aristas y etiquetas
     */
    private void MostrarRelacionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MostrarRelacionesActionPerformed
        
        System.setProperty("org.graphstream.ui", "javafx");
        
        Graph graph = new SingleGraph("Grafo");
        List <User> user = Global.getGrafo().getVertices();
        if (Global.getGrafo()!= null){
            for (int i = 0; i < Global.getGrafo().getnVertices(); i++) {
                String a = user.getElement(i).getId();
                graph.addNode(a);
                graph.getNode(a).setAttribute("ui.label", user.getElement(i).getId());
                graph.getNode(a).setAttribute("ui.style"," text-size: 20px; text-offset: 50px, 0px;");
               
            }
            
            for (int i = 0; i < Global.getGrafo().getMatriz().length; i++) {
                for (int j = i + 1; j < Global.getGrafo().getMatriz()[i].length; j++) {
                    if (Global.getGrafo().getMatriz()[i][j] > 0) {
                        graph.addEdge(Global.getGrafo().getNameUser(i) + Global.getGrafo().getNameUser(j) , Global.getGrafo().getNameUser(i) , Global.getGrafo().getNameUser(j), false).setAttribute("ui.label", Global.getGrafo().getMatriz()[i][j]);
                    }
                }
            }    
            
            String css = "node { fill-color: yellow; text-size: 20px; size: 20px; }"
                        + "edge { text-size: 15px; text-offset: 0,-10; }";
            graph.addAttribute("ui.stylesheet", css);
            graph.addAttribute("ui.quality");
            graph.addAttribute("ui.antialias");
            Viewer viewer = graph.display();
            viewer.setCloseFramePolicy(Viewer.CloseFramePolicy.CLOSE_VIEWER);
            
            }else {
            JOptionPane.showMessageDialog(null,"El grafo no tiene información!");  
        }      
    }//GEN-LAST:event_MostrarRelacionesActionPerformed
    /**
     * Este método despliega la ventana 2, encargada de mostrar las islas utilizando recorrido en anchura
     * 
     */
    private void BFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BFSActionPerformed
        Ventana2 v2 = new Ventana2();
        v2.setVisible(true);
        v2.bfs();
    }//GEN-LAST:event_BFSActionPerformed
    /**
     * Este método despliega la ventana 2, encargada de mostrar las islas utilizando recorrido en profundidad
     * 
     */
    private void DFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DFSActionPerformed
        Ventana3 v3 = new Ventana3();
        v3.setVisible(true);
        v3.Dfs();
    }//GEN-LAST:event_DFSActionPerformed

    private void añadirUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_añadirUsuarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_añadirUsuarioActionPerformed

    /**
     * Este método despliega la ventana 4, encargada de mostrar los puentes
     * 
     */    
    private void puentesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_puentesActionPerformed
        Ventana4 v4 = new Ventana4();
        v4.setVisible(true);
    }//GEN-LAST:event_puentesActionPerformed
    
    /**
     * Este método despliega la ventana 4, encargada de mostrar los puentes
     * 
     */
    private void puentesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_puentesMouseClicked
        Ventana4 v4 = new Ventana4();
        v4.setVisible(true);
        v4.buscarPuentes();
    }//GEN-LAST:event_puentesMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Menu().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem BFS;
    private javax.swing.JMenuItem DFS;
    private javax.swing.JMenuItem MostrarRelaciones;
    private javax.swing.JMenuItem actualizarArchivo;
    private javax.swing.JMenuItem archivoDefault;
    private javax.swing.JMenu archivos;
    private javax.swing.JMenuItem añadirUsuario;
    private javax.swing.JMenuItem cargarArchivo;
    private javax.swing.JMenu editarRelaciones;
    private javax.swing.JMenuItem eliminarUsuario;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JMenu mostrarIslas;
    private javax.swing.JMenu mostrarRelaciones;
    private javax.swing.JMenu puentes;
    // End of variables declaration//GEN-END:variables
    
     /**
     * Este método permite que se despliegue el JFileChooser y además, lee el archivo seleccionado
     * @return grafo que contiene la información de los usuarios y las relaciones de amistad que se obtuvo del txt
     */
    private Grafo openFile() {
    String aux = "";   
    String text = "";
    Grafo grafo = null;
    try
    {
     JFileChooser jf = new JFileChooser();
     jf.showOpenDialog(this);
     File file = jf.getSelectedFile();
     if(file!=null)
     {     
        FileReader fr = new FileReader(file);
        BufferedReader br = new BufferedReader(fr);
        while((aux=br.readLine())!=null)
        {
           text += aux + "\n";
        }
           br.close();
           JOptionPane.showMessageDialog(null,"El archivo se abrió exitosamente!");
      }
        grafo = txt.checkFile(text);
        Global.setGrafo(grafo);
        if (grafo != null){
            Ventana1 v1 = new Ventana1();
            v1.setVisible(true);
            return grafo;
        }
     }
     catch(IOException ex)
     {
       JOptionPane.showMessageDialog(null,ex+"" +
             "\nNo se ha encontrado el archivo");
      }
    return grafo;
    }
}
